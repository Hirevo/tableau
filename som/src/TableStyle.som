TableStyle = (
    |
    topLeftCorner " : String "
    topRightCorner " : String "
    bottomLeftCorner " : String "
    bottomRightCorner " : String "
    outerLeftVertical " : String "
    outerRightVertical " : String "
    outerBottomHorizontal " : String "
    outerTopHorizontal " : String "
    intersection " : String "
    vertical " : String "
    horizontal " : String "
    |

    topLeftCorner = ( ^ topLeftCorner )
    topLeftCorner: value = ( topLeftCorner := value )

    topRightCorner = ( ^ topRightCorner )
    topRightCorner: value = ( topRightCorner := value )

    bottomLeftCorner = ( ^ bottomLeftCorner )
    bottomLeftCorner: value = ( bottomLeftCorner := value )

    bottomRightCorner = ( ^ bottomRightCorner )
    bottomRightCorner: value = ( bottomRightCorner := value )

    outerLeftVertical = ( ^ outerLeftVertical )
    outerLeftVertical: value = ( outerLeftVertical := value )

    outerRightVertical = ( ^ outerRightVertical )
    outerRightVertical: value = ( outerRightVertical := value )

    outerBottomHorizontal = ( ^ outerBottomHorizontal )
    outerBottomHorizontal: value = ( outerBottomHorizontal := value )

    outerTopHorizontal = ( ^ outerTopHorizontal )
    outerTopHorizontal: value = ( outerTopHorizontal := value )

    intersection = ( ^ intersection )
    intersection: value = ( intersection := value )

    vertical = ( ^ vertical )
    vertical: value = ( vertical := value )

    horizontal = ( ^ horizontal )
    horizontal: value = ( horizontal := value )

    -------------------

    ascii = (
        | style |
        style := super new.
        style topLeftCorner: '+'.
        style topRightCorner: '+'.
        style bottomLeftCorner: '+'.
        style bottomRightCorner: '+'.
        style outerLeftVertical: '+'.
        style outerRightVertical: '+'.
        style outerBottomHorizontal: '+'.
        style outerTopHorizontal: '+'.
        style intersection: '+'.
        style vertical: '|'.
        style horizontal: '-'.
        ^ style.
    )

    heavy = (
        | style |
        style := super new.
        style topLeftCorner: '╔'.
        style topRightCorner: '╗'.
        style bottomLeftCorner: '╚'.
        style bottomRightCorner: '╝'.
        style outerLeftVertical: '╠'.
        style outerRightVertical: '╣'.
        style outerBottomHorizontal: '╩'.
        style outerTopHorizontal: '╦'.
        style intersection: '╬'.
        style vertical: '║'.
        style horizontal: '═'.
        ^ style.
    )

    thin = (
        | style |
        style := super new.
        style topLeftCorner: '┌'.
        style topRightCorner: '┐'.
        style bottomLeftCorner: '└'.
        style bottomRightCorner: '┘'.
        style outerLeftVertical: '├'.
        style outerRightVertical: '┤'.
        style outerBottomHorizontal: '┴'.
        style outerTopHorizontal: '┬'.
        style intersection: '┼'.
        style vertical: '│'.
        style horizontal: '─'.
        ^ style.
    )

    rounded = (
        | style |
        style := super new.
        style topLeftCorner: '╭'.
        style topRightCorner: '╮'.
        style bottomLeftCorner: '╰'.
        style bottomRightCorner: '╯'.
        style outerLeftVertical: '├'.
        style outerRightVertical: '┤'.
        style outerBottomHorizontal: '┴'.
        style outerTopHorizontal: '┬'.
        style intersection: '┼'.
        style vertical: '│'.
        style horizontal: '─'.
        ^ style.
    )

    fancy = (
        | style |
        style := super new.
        style topLeftCorner: '╔'.
        style topRightCorner: '╗'.
        style bottomLeftCorner: '╚'.
        style bottomRightCorner: '╝'.
        style outerLeftVertical: '╠'.
        style outerRightVertical: '╣'.
        style outerBottomHorizontal: '╩'.
        style outerTopHorizontal: '╦'.
        style intersection: '┼'.
        style vertical: '│'.
        style horizontal: '─'.
        ^ style.
    )

    blank = (
        | style |
        style := super new.
        style topLeftCorner: '\0'.
        style topRightCorner: '\0'.
        style bottomLeftCorner: '\0'.
        style bottomRightCorner: '\0'.
        style outerLeftVertical: '\0'.
        style outerRightVertical: '\0'.
        style outerBottomHorizontal: '\0'.
        style outerTopHorizontal: '\0'.
        style intersection: '\0'.
        style vertical: '\0'.
        style horizontal: '\0'.
        ^ style.
    )

    empty = (
        | style |
        style := super new.
        style topLeftCorner: ' '.
        style topRightCorner: ' '.
        style bottomLeftCorner: ' '.
        style bottomRightCorner: ' '.
        style outerLeftVertical: ' '.
        style outerRightVertical: ' '.
        style outerBottomHorizontal: ' '.
        style outerTopHorizontal: ' '.
        style intersection: ' '.
        style vertical: ' '.
        style horizontal: ' '.
        ^ style.
    )
)

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Style {
    pub top_left_corner: char,
    pub top_right_corner: char,
    pub bottom_left_corner: char,
    pub bottom_right_corner: char,
    pub outer_left_vertical: char,
    pub outer_right_vertical: char,
    pub outer_bottom_horizontal: char,
    pub outer_top_horizontal: char,
    pub intersection: char,
    pub vertical: char,
    pub horizontal: char,
}

impl Style {
    /// Basic terminal table style
    ///
    ///# Example
    ///
    ///<pre>
    ///   +---------------------------------------------------------------------------------+
    ///   |                            This is some centered text                           |
    ///   +----------------------------------------+----------------------------------------+
    ///   | This is left aligned text              |             This is right aligned text |
    ///   +----------------------------------------+----------------------------------------+
    ///   | This is left aligned text              |             This is right aligned text |
    ///   +----------------------------------------+----------------------------------------+
    ///   | This is some really really really really really really really really really tha |
    ///   | t is going to wrap to the next line                                             |
    ///   +---------------------------------------------------------------------------------+
    ///</pre>
    pub fn simple() -> Style {
        Style {
            top_left_corner: '+',
            top_right_corner: '+',
            bottom_left_corner: '+',
            bottom_right_corner: '+',
            outer_left_vertical: '+',
            outer_right_vertical: '+',
            outer_bottom_horizontal: '+',
            outer_top_horizontal: '+',
            intersection: '+',
            vertical: '|',
            horizontal: '-',
        }
    }

    /// Table style using extended character set
    ///
    ///# Example
    ///
    ///<pre>
    /// ╔═════════════════════════════════════════════════════════════════════════════════╗
    /// ║                            This is some centered text                           ║
    /// ╠════════════════════════════════════════╦════════════════════════════════════════╣
    /// ║ This is left aligned text              ║             This is right aligned text ║
    /// ╠════════════════════════════════════════╬════════════════════════════════════════╣
    /// ║ This is left aligned text              ║             This is right aligned text ║
    /// ╠════════════════════════════════════════╩════════════════════════════════════════╣
    /// ║ This is some really really really really really really really really really tha ║
    /// ║ t is going to wrap to the next line                                             ║
    /// ╚═════════════════════════════════════════════════════════════════════════════════╝
    ///</pre>
    pub fn extended() -> Style {
        Style {
            top_left_corner: '╔',
            top_right_corner: '╗',
            bottom_left_corner: '╚',
            bottom_right_corner: '╝',
            outer_left_vertical: '╠',
            outer_right_vertical: '╣',
            outer_bottom_horizontal: '╩',
            outer_top_horizontal: '╦',
            intersection: '╬',
            vertical: '║',
            horizontal: '═',
        }
    }

    /// <pre>
    /// ┌─────────────────────────────────────────────────────────────────────────────────┐
    /// │                            This is some centered text                           │
    /// ├────────────────────────────────────────┬────────────────────────────────────────┤
    /// │ This is left aligned text              │             This is right aligned text │
    /// ├────────────────────────────────────────┼────────────────────────────────────────┤
    /// │ This is left aligned text              │             This is right aligned text │
    /// ├────────────────────────────────────────┴────────────────────────────────────────┤
    /// │ This is some really really really really really really really really really tha │
    /// │ t is going to wrap to the next line                                             │
    /// └─────────────────────────────────────────────────────────────────────────────────┘
    /// </pre>
    pub fn thin() -> Style {
        Style {
            top_left_corner: '┌',
            top_right_corner: '┐',
            bottom_left_corner: '└',
            bottom_right_corner: '┘',
            outer_left_vertical: '├',
            outer_right_vertical: '┤',
            outer_bottom_horizontal: '┴',
            outer_top_horizontal: '┬',
            intersection: '┼',
            vertical: '│',
            horizontal: '─',
        }
    }

    ///  <pre>
    /// ╭─────────────────────────────────────────────────────────────────────────────────╮
    /// │                            This is some centered text                           │
    /// ├────────────────────────────────────────┬────────────────────────────────────────┤
    /// │ This is left aligned text              │             This is right aligned text │
    /// ├────────────────────────────────────────┼────────────────────────────────────────┤
    /// │ This is left aligned text              │             This is right aligned text │
    /// ├────────────────────────────────────────┴────────────────────────────────────────┤
    /// │ This is some really really really really really really really really really tha │
    /// │ t is going to wrap to the next line                                             │
    /// ╰─────────────────────────────────────────────────────────────────────────────────╯
    /// </pre>
    pub fn rounded() -> Style {
        Style {
            top_left_corner: '╭',
            top_right_corner: '╮',
            bottom_left_corner: '╰',
            bottom_right_corner: '╯',
            outer_left_vertical: '├',
            outer_right_vertical: '┤',
            outer_bottom_horizontal: '┴',
            outer_top_horizontal: '┬',
            intersection: '┼',
            vertical: '│',
            horizontal: '─',
        }
    }

    /// <pre>
    /// ╔─────────────────────────────────────────────────────────────────────────────────╗
    /// │                            This is some centered text                           │
    /// ╠────────────────────────────────────────╦────────────────────────────────────────╣
    /// │ This is left aligned text              │             This is right aligned text │
    /// ╠────────────────────────────────────────┼────────────────────────────────────────╣
    /// │ This is left aligned text              │             This is right aligned text │
    /// ╠────────────────────────────────────────╩────────────────────────────────────────╣
    /// │ This is some really really really really really really really really really tha │
    /// │ t is going to wrap to the next line                                             │
    /// ╚─────────────────────────────────────────────────────────────────────────────────╝
    /// </pre>

    pub fn elegant() -> Style {
        Style {
            top_left_corner: '╔',
            top_right_corner: '╗',
            bottom_left_corner: '╚',
            bottom_right_corner: '╝',
            outer_left_vertical: '╠',
            outer_right_vertical: '╣',
            outer_bottom_horizontal: '╩',
            outer_top_horizontal: '╦',
            intersection: '┼',
            vertical: '│',
            horizontal: '─',
        }
    }

    /// Table style comprised of null characters
    ///
    ///# Example
    ///
    ///<pre>
    ///                           This is some centered text
    ///
    /// This is left aligned text                           This is right aligned text
    ///
    /// This is left aligned text                           This is right aligned text
    ///
    /// This is some really really really really really really really really really tha
    /// t is going to wrap to the next line
    ///</pre>
    pub fn blank() -> Style {
        Style {
            top_left_corner: '\0',
            top_right_corner: '\0',
            bottom_left_corner: '\0',
            bottom_right_corner: '\0',
            outer_left_vertical: '\0',
            outer_right_vertical: '\0',
            outer_bottom_horizontal: '\0',
            outer_top_horizontal: '\0',
            intersection: '\0',
            vertical: '\0',
            horizontal: '\0',
        }
    }

    /// Table style comprised of empty characters for compatibility with terminals
    /// that don't handle null characters appropriately
    ///
    ///# Example
    ///
    ///<pre>
    ///                           This is some centered text
    ///
    /// This is left aligned text                           This is right aligned text
    ///
    /// This is left aligned text                           This is right aligned text
    ///
    /// This is some really really really really really really really really really tha
    /// t is going to wrap to the next line
    ///</pre>
    pub fn empty() -> Style {
        Style {
            top_left_corner: ' ',
            top_right_corner: ' ',
            bottom_left_corner: ' ',
            bottom_right_corner: ' ',
            outer_left_vertical: ' ',
            outer_right_vertical: ' ',
            outer_bottom_horizontal: ' ',
            outer_top_horizontal: ' ',
            intersection: ' ',
            vertical: ' ',
            horizontal: ' ',
        }
    }
}
